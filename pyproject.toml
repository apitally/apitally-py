[project]
name = "apitally"
description = "Simple API monitoring & analytics for REST APIs built with FastAPI, Flask, Django, Starlette and Litestar."
authors = [
    { name = "Apitally", email = "hello@apitally.io" },
]
readme = "README.md"
license = { text = "MIT License" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: FastAPI",
    "Framework :: Flask",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
    "Topic :: Software Development",
    "Topic :: System :: Monitoring",
    "Typing :: Typed",
]
requires-python = ">=3.8,<4.0"
dependencies = [
    "backoff>=2.0.0",
]
dynamic = ["version"]

[project.optional-dependencies]
django_ninja = [
    "django>=2.2,<5; python_version<'3.10'",
    "django>=2.2; python_version>='3.10'",
    "django-ninja>=0.18.0",
    "requests>=2.26.0",
]
django_rest_framework = [
    "django>=2.2,<5; python_version<'3.10'",
    "django>=2.2; python_version>='3.10'",
    "djangorestframework>=3.10.0",
    "uritemplate>=3.0.0", # required for schema generation
    "inflection>=0.5.1", # required for schema generation
    "requests>=2.26.0",
]
fastapi = [
    "fastapi>=0.88.0",
    "starlette>=0.22.0,<1.0.0",
    "httpx>=0.22.0",
]
flask = [
    "flask>=2.0.0",
    "requests>=2.26.0",
]
litestar = [
    "litestar>=2.0.0",
    "httpx>=0.22.0",
]
sentry = [
    "sentry-sdk>=2.2.0",
]
starlette = [
    "starlette>=0.21.0,<1.0.0",
    "httpx>=0.22.0",
]

[project.urls]
Homepage = "https://apitally.io"
Documentation = "https://docs.apitally.io"
Repository = "https://github.com/apitally/apitally-py"

[dependency-groups]
dev = [
    "ipykernel~=6.29.0",
    "mypy~=1.13.0",
    "pre-commit~=3.5.0; python_version<'3.9'",
    "pre-commit~=4.0.1; python_version>='3.9'",
    "ruff~=0.8.0",
]
test = [
    "pytest~=7.4.4; python_version<'3.9'",
    "pytest~=8.3.3; python_version>='3.9'",
    "pytest-asyncio~=0.21.2",
    "pytest-cov~=5.0.0; python_version<'3.9'",
    "pytest-cov~=6.0.0; python_version>='3.9'",
    "pytest-httpx~=0.22.0; python_version<'3.9'",
    "pytest-httpx~=0.33.0; python_version>='3.9'",
    "pytest-mock~=3.14.0",
    "requests-mock~=1.12.1",
]
types = [
    "django-types",
    "djangorestframework-types",
    "types-colorama",
    "types-docutils",
    "types-pygments",
    "types-pyyaml",
    "types-requests",
    "types-setuptools",
    "types-six",
    "types-ujson",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.uv]
default-groups = ["dev", "test", "types"]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
ignore = ["E501"]
select = ["E", "F", "W", "I"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.coverage.run]
source = ["apitally"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING"]
