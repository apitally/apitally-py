[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
name = "apitally"
version = "0.0.0"
description = "Apitally client library for Python"
authors = ["Simon Gurcke <simon@gurcke.de>"]
license = "MIT License"
repository = "https://github.com/apitally/apitally-python"
readme = "README.md"

[tool.poetry.dependencies]
backoff = ">=2.0.0"
python = ">=3.8,<4.0"

# Optional dependencies, included in extras
django = { version = ">=4.0", optional = true }
django-ninja = { version = ">=0.18.0", optional = true }
djangorestframework = { version = ">=3.12.0", optional = true }
fastapi = { version = ">=0.87.0", optional = true }
flask = { version = ">=2.0.0", optional = true }
httpx = { version = ">=0.22.0", optional = true }
requests = { version = ">=2.26.0", optional = true }
starlette = { version = ">=0.21.0", optional = true }

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
mypy = "^1.4.1"
pre-commit = "^3.3.3"
ruff = "^0.0.275"
ipykernel = "^6.25.1"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-httpx = "^0.22.0"
pytest-mock = "^3.11.1"
requests-mock = "^1.11.0"

[tool.poetry.group.types.dependencies]
django-types = "*"
djangorestframework-types = "*"
types-colorama = "*"
types-docutils = "*"
types-pygments = "*"
types-pyyaml = "*"
types-requests = "*"
types-setuptools = "*"
types-six = "*"
types-ujson = "*"

[tool.poetry.extras]
django_rest_framework = ["django", "djangorestframework", "requests"]
django_ninja = ["django", "django-ninja", "requests"]
fastapi = ["fastapi", "starlette", "httpx"]
flask = ["flask", "requests"]
starlette = ["starlette", "httpx"]

[tool.poetry-dynamic-versioning]
enable = true
style = "semver"
vcs = "git"

[tool.black]
line-length = 120
target-version = ["py311"]

[tool.ruff]
ignore = ["E501"]
select = ["E", "F", "W", "I"]
target-version = "py311"

[tool.ruff.isort]
lines-after-imports = 2

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.coverage.run]
source = ["apitally"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING"]
